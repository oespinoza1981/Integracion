*************************************************************************************************************
                                                                                                             EXAMEN DE INTEGRACION DE SOFTWARE
EVELIN RIOS
DESARROLLO DE SOFTWARE
TERCER NIVEL
*************************************************************************************************************
-Script de creación de la Base de Datos.
- Scripts con los INSERT a cada una de las tablas
- Scripts de todos los objetos que se tengan que crear para solventar los requerimientos funcionales.

script generado de la base de datos: 

https://ister-my.sharepoint.com/my?id=%2Fpersonal%2Fevelin_rios_ister_edu_ec%2FDocuments%2FDatos%20adjuntos%2FINTEGRACION%20DE%20SOFTWARE%20EXAMEN%2FdbSistema%20Script%2Esql&parent=%2Fpersonal%2Fevelin_rios_ister_edu_ec%2FDocuments%2FDatos%20adjuntos%2FINTEGRACION%20DE%20SOFTWARE%20EXAMEN

verificación base de datos:
https://ister-my.sharepoint.com/:v:/g/personal/evelin_rios_ister_edu_ec/EWKfNHkJVMZMgmNxmwxSHdoB600-efy5IMyGAMB0fMJ5rA?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&e=i8eqJX


1.- -Script de creación de la Base de Datos.


                                                                        *********************************************************
*********************************  CREACION DE LA BASE DE DATOS Y TABLAS  *********************************
                                                                        *********************************************************

CREATE DATABASE dbSistema;
GO

-- Creación de las tablas
CREATE TABLE Brands (
    brand_id INT NOT NULL IDENTITY(1,1),
    brand_name VARCHAR(255) NOT NULL,
    PRIMARY KEY (brand_id)
);

CREATE TABLE Categories (
    category_id INT NOT NULL IDENTITY(1,1),
    category_name VARCHAR(255) NOT NULL,
    PRIMARY KEY (category_id)
);

CREATE TABLE Products (
    product_id INT NOT NULL IDENTITY(1,1),
    product_name VARCHAR(255) NOT NULL,
    brand_id INT NOT NULL,
    category_id INT NOT NULL,
    model_year SMALLINT NULL,
    list_price DECIMAL(10, 2) NULL,
    PRIMARY KEY (product_id),
    FOREIGN KEY (brand_id) REFERENCES Brands(brand_id),
    FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

CREATE TABLE Customers (
    customer_id INT NOT NULL IDENTITY(1,1),
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    phone VARCHAR(25) NULL,
    email VARCHAR(255) NULL,
    street VARCHAR(255) NULL,
    city VARCHAR(255) NULL,
    state VARCHAR(10) NULL,
    zip_code VARCHAR(5) NULL,
    PRIMARY KEY (customer_id)
);

CREATE TABLE Stores (
    store_id INT NOT NULL IDENTITY(1,1),
    store_name VARCHAR(255) NOT NULL,
    phone VARCHAR(25) NULL,
    email VARCHAR(255) NULL,
    street VARCHAR(255) NULL,
    city VARCHAR(255) NULL,
    state VARCHAR(10) NULL,
    zip_code VARCHAR(5) NULL,
    PRIMARY KEY (store_id)
);

CREATE TABLE Staffs (
    staff_id INT NOT NULL IDENTITY(1,1),
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(255) NULL,
    phone VARCHAR(25) NULL,
    active TINYINT NULL,
    store_id INT NULL,
    manager_id INT NULL,
    PRIMARY KEY (staff_id),
    FOREIGN KEY (store_id) REFERENCES Stores(store_id),
    FOREIGN KEY (manager_id) REFERENCES Staffs(staff_id)
);

CREATE TABLE Orders (
    order_id INT NOT NULL IDENTITY(1,1),
    customer_id INT NOT NULL,
    order_status TINYINT NOT NULL,
    order_date DATE NOT NULL,
    required_date DATE NULL,
    shipped_date DATE NULL,
    store_id INT NOT NULL,
    staff_id INT NOT NULL,
    PRIMARY KEY (order_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
    FOREIGN KEY (store_id) REFERENCES Stores(store_id),
    FOREIGN KEY (staff_id) REFERENCES Staffs(staff_id)
);

CREATE TABLE Order_items (
    order_id INT NOT NULL,
    item_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    list_price DECIMAL(10, 2) NOT NULL,
    discount DECIMAL(4, 2) NOT NULL,
    PRIMARY KEY (order_id, item_id),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Stocks (
    store_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NULL,
    PRIMARY KEY (store_id, product_id),
    FOREIGN KEY (store_id) REFERENCES Stores(store_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE SystemUser (
    id_user VARCHAR(10) NOT NULL,
    usuario VARCHAR(50) NOT NULL,
    pass VARCHAR(10) NOT NULL,
    rol VARCHAR(10) NOT NULL,
    staff_id INT NULL,
    PRIMARY KEY (id_user),
    FOREIGN KEY (staff_id) REFERENCES Staffs(staff_id)
);



2.- - Scripts con los INSERT a cada una de las tablas



                                                                          *********************************
*********************************  INSERT DE LOS DATOS  *********************************
                                                                          *********************************

SET IDENTITY_INSERT Brands ON;

INSERT INTO Brands (brand_id, brand_name) VALUES 
(1, 'Nike'), (2, 'Adidas'), (3, 'Puma'), (4, 'Reebok'), 
(5, 'New Balance'), (6, 'Asics'), (7, 'Under Armour'), (8, 'Converse');

SET IDENTITY_INSERT Brands OFF;

SET IDENTITY_INSERT Categories ON;

INSERT INTO Categories (category_id, category_name) VALUES 
(1, 'Running'), (2, 'Basketball'), (3, 'Casual'), (4, 'Training'),
(5, 'Soccer'), (6, 'Tennis'), (7, 'Golf'), (8, 'Hiking');

SET IDENTITY_INSERT Categories OFF;

SET IDENTITY_INSERT Stores ON;

INSERT INTO Stores (store_id, store_name, phone, email, street, city, state, zip_code) VALUES 
(1, 'Main Store', '1234567890', 'main.store@example.com', '123 Main St', 'Somewhere', 'CA', '90210'),
(2, 'Secondary Store', '0987654321', 'secondary.store@example.com', '456 Elm St', 'Anywhere', 'NY', '10001'),
(3, 'Downtown Store', '5555555555', 'downtown.store@example.com', '789 Oak St', 'Everywhere', 'TX', '75001'),
(4, 'Uptown Store', '6666666666', 'uptown.store@example.com', '101 Pine St', 'Nowhere', 'FL', '33012');

SET IDENTITY_INSERT Stores OFF;

SET IDENTITY_INSERT Products ON;

INSERT INTO Products (product_id, product_name, brand_id, category_id, model_year, list_price) VALUES
(1, 'Nike Air Zoom', 1, 1, 2023, 100.00),
(2, 'Adidas Ultraboost', 2, 1, 2023, 120.00),
(3, 'Puma Suede Classic', 3, 3, 2022, 80.00),
(4, 'Reebok Nano', 4, 4, 2023, 95.00),
(5, 'New Balance 1080', 5, 1, 2023, 110.00),
(6, 'Asics Gel-Kayano', 6, 1, 2023, 130.00),
(7, 'Under Armour HOVR', 7, 4, 2023, 105.00),
(8, 'Converse All Star', 8, 3, 2022, 60.00);

SET IDENTITY_INSERT Products OFF;

SET IDENTITY_INSERT Customers ON;

INSERT INTO Customers (customer_id, first_name, last_name, phone, email, street, city, state, zip_code) VALUES
(1, 'John', 'Doe', '1234567890', 'john.doe@example.com', '123 Main St', 'Somewhere', 'CA', '90210'),
(2, 'Jane', 'Smith', '0987654321', 'jane.smith@example.com', '456 Elm St', 'Anywhere', 'NY', '10001'),
(3, 'Michael', 'Johnson', '5555555555', 'michael.johnson@example.com', '789 Oak St', 'Everywhere', 'TX', '75001'),
(4, 'Emily', 'Davis', '6666666666', 'emily.davis@example.com', '101 Pine St', 'Nowhere', 'FL', '33012'),
(5, 'Chris', 'Brown', '7777777777', 'chris.brown@example.com', '202 Cedar St', 'Somewhere', 'CA', '90210'),
(6, 'Jessica', 'Williams', '8888888888', 'jessica.williams@example.com', '303 Birch St', 'Anywhere', 'NY', '10001');

SET IDENTITY_INSERT Customers OFF;

SET IDENTITY_INSERT Staffs ON;

INSERT INTO Staffs (staff_id, first_name, last_name, email, phone, active, store_id, manager_id) VALUES
(1, 'Alice', 'Johnson', 'alice.johnson@example.com', '1234567890', 1, 1, NULL),
(2, 'Bob', 'Martin', 'bob.martin@example.com', '2345678901', 1, 2, 1),
(3, 'Charlie', 'Brown', 'charlie.brown@example.com', '3456789012', 1, 3, 1),
(4, 'Diana', 'Prince', 'diana.prince@example.com', '4567890123', 1, 4, 2),
(5, 'Edward', 'Norton', 'edward.norton@example.com', '5678901234', 1, 1, 1),
(6, 'Fiona', 'Apple', 'fiona.apple@example.com', '6789012345', 1, 2, 3);

SET IDENTITY_INSERT Staffs OFF;

INSERT INTO Stocks (store_id, product_id, quantity) VALUES
(1, 1, 50), (1, 2, 30), (1, 3, 40), (1, 4, 25),
(2, 5, 20), (2, 6, 15), (3, 7, 35), (3, 8, 10),
(4, 1, 60), (4, 2, 45), (4, 3, 50), (4, 4, 30);

INSERT INTO SystemUser (id_user, usuario, pass, rol, staff_id) VALUES
('U1', 'alice.johnson', 'pass123', 'Admin', 1),
('U2', 'bob.martin', 'pass234', 'Manager', 2),
('U3', 'charlie.brown', 'pass345', 'Staff', 3),
('U4', 'diana.prince', 'pass456', 'Manager', 4),
('U5', 'edward.norton', 'pass567', 'Staff', 5),
('U6', 'fiona.apple', 'pass678', 'User', 6);




3.- - Scripts de todos los objetos que se tengan que crear para solventar los requerimientos funcionales.



                                                                           *********************************
*********************************  CREACION PROCEDURE  *********************************
                                                                          *********************************

CREATE PROCEDURE AuthenticateUser
    @id_user VARCHAR(10),
    @pass VARCHAR(10)
AS
BEGIN
    DECLARE @userExists INT;


    SELECT @userExists = COUNT(*)
    FROM SystemUser
    WHERE id_user = @id_user AND pass = @pass;

    IF @userExists > 0
    BEGIN

        PRINT 'Autenticación del usuario exitosa. Los datos del usuario son:';


        SELECT 
            u.id_user AS usuario,
            CONCAT(s.first_name, ' ', s.last_name) AS nombre,
            s.email,
            s.phone
        FROM SystemUser u
        JOIN Staffs s ON u.staff_id = s.staff_id
        WHERE u.id_user = @id_user;
    END
    ELSE
    BEGIN

        PRINT 'El usuario no existe en el sistema';
    END
END;

---------------------------------------------  COMPROBACIÓN  ---------------------------------------------
………………………………………………………………………………………………………………………………………………………………………………………………………
1.- PARA COMPROBAR EL FUNCIONAMIENTO DEL PROCEDURE
………………………………………………………………………………………………………………………………………………………………………………………………………
EXEC AuthenticateUser @id_user = 'u001', @pass = 'pass1';   --(si no también se puede elegir cualquier otro usuario)
………………………………………………………………………………………………………………………………………………………………………………………………………


                                                                       *********************************
*********************************  CREACION TIGGER *********************************
                                                                       *********************************

CREATE TRIGGER trg_UpdateStockAfterOrder
ON Order_items
AFTER INSERT
AS
BEGIN
    -- Actualizar el stock basado en los ítems de la orden recién insertada
    UPDATE s
    SET s.quantity = s.quantity - i.quantity
    FROM Stocks s
    JOIN inserted i ON s.product_id = i.product_id
    JOIN Orders o ON i.order_id = o.order_id
    WHERE s.store_id = o.store_id;
END;

---------------------------------------------  COMPROBACIÓN  ---------------------------------------------
………………………………………………………………………………………………………………………………………………………………………………………………………
1.- INSERTAR UNA NUEVA ORDEN JUNTO CON SUS ITEMS
………………………………………………………………………………………………………………………………………………………………………………………………………

INSERT INTO Orders (customer_id, order_status, order_date, required_date, shipped_date, store_id, staff_id) 
VALUES (1, 1, '2024-07-30', '2024-08-04', '2024-08-02', 1, 1);

INSERT INTO Order_items (order_id, item_id, product_id, quantity, list_price, discount) 
VALUES 
((SELECT MAX(order_id) FROM Orders), 1, 1, 2, 100.00, 0.00),  
((SELECT MAX(order_id) FROM Orders), 2, 2, 3, 120.00, 10.00);  
………………………………………………………………………………………………………………………………………………………………………………………………………

2.- PARA VERIFICAR  SI SE APLICÓ CORRECTAMENTE EL DESCUENTO AL STOCK
………………………………………………………………………………………………………………………………………………………………………………………………………
SELECT store_id, product_id, quantity
FROM Stocks;
………………………………………………………………………………………………………………………………………………………………………………………………………

